{"ast":null,"code":"import { firestore, convertCollectionsSnapshotToMap } from '../../firebase//firebase.utils';\nimport ShopActionTypes from './shop.types'; // thunks are action creators that returns a function gets dispatch (similar to mapDispatchToProps)\n// when thunk is enabled, anytime one attempt to disapatch a function instead of abject, \n// thunk will call that function with dispatch as its first argument\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(err => {\n      dispatch(fetchCollectionsFailure(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/gajendra/testP/shop-here/client/src/redux/shop/shop.actions.js"],"names":["firestore","convertCollectionsSnapshotToMap","ShopActionTypes","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","err","message"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,+BAApB,QAA2D,gCAA3D;AACA,OAAOC,eAAP,MAA4B,cAA5B,C,CAEA;AACA;AACA;;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAAEF,eAAe,CAACM,yBADgC;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEF,eAAe,CAACU,yBAD8B;AAEpDH,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGf,SAAS,CAACgB,UAAV,CAAqB,aAArB,CAAtB;AAEAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAY,IAAAA,aAAa,CAACE,GAAd,GACCC,IADD,CACMC,QAAQ,IAAI;AACd,YAAMZ,cAAc,GAAGN,+BAA+B,CAACkB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACH,KAJD,EAKCa,KALD,CAKOC,GAAG,IAAI;AACVP,MAAAA,QAAQ,CAACJ,uBAAuB,CAACW,GAAG,CAACC,OAAL,CAAxB,CAAR;AACH,KAPD;AAQH,GAbD;AAcH,CAfM","sourcesContent":["import { firestore, convertCollectionsSnapshotToMap } from '../../firebase//firebase.utils';\nimport ShopActionTypes from './shop.types';\n\n// thunks are action creators that returns a function gets dispatch (similar to mapDispatchToProps)\n// when thunk is enabled, anytime one attempt to disapatch a function instead of abject, \n// thunk will call that function with dispatch as its first argument\n\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n});\n\nexport const fetchCollectionsFailure = errorMessage => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage,\n});\n\nexport const fetchCollectionsStartAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collections');\n\n        dispatch(fetchCollectionsStart());\n\n        collectionRef.get()\n        .then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n        })\n        .catch(err => {\n            dispatch(fetchCollectionsFailure(err.message));\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}